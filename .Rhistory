"y_total_m",       "Salario mensual",
"y_total_m_ha",    "Salario por hora",
"ln_salario",       "ln(Salario)",
"age",              "Edad",
"sex",              "Sexo (1 = Mujer)",
"micro_empresa",    "Trabaja en microempresa (1 = Sí)",
"formal",           "Trabajo formal (1 = Sí)",
"hours_work_usual", "Horas trabajadas",
"p7040",       "Segundo trabajo (1 = Sí)"
) %>%
dplyr::filter(var %in% names(db))
to_numeric <- function(x) {
if (is.factor(x) || is.character(x)) suppressWarnings(as.numeric(as.character(x))) else as.numeric(x)
}
## 2) Se calculan las estadísticas descriptivas para cada variable
tabla_1 <- variables_descriptivas %>%
mutate(
x        = map(var, ~ to_numeric(db[[.x]])),
N        = map_int(x, ~ sum(!is.na(.))),
Media    = map_dbl(x, ~ mean(., na.rm = TRUE)),
DesvEst  = map_dbl(x, ~ sd(.,   na.rm = TRUE)),
Min      = map_dbl(x, ~ suppressWarnings(min(., na.rm = TRUE))),
Max      = map_dbl(x, ~ suppressWarnings(max(., na.rm = TRUE)))
) %>%
transmute(
Variable = label, N, Media, `Desv. Est.` = DesvEst, Min, Max
)
## 3) Se usan dos decimales
tabla_1 <- tabla_1 %>%
mutate(
N           = comma(N, accuracy = 1),
Media       = comma(Media, accuracy = 0.01),
`Desv. Est.`= comma(`Desv. Est.`, accuracy = 0.01),
Min         = comma(Min, accuracy = 0.01),
Max         = comma(Max, accuracy = 0.01)
)
pacman::p_load(
tidyverse,
rvest,
httr,
fs,
janitor,
readr,
haven,
readxl,
glue,
chromote,
xml2,
tibble,
purrr,
VIM,
gtsummary,
gt,
scales
)
tabla_1 <- tabla_1 %>%
mutate(
N           = comma(N, accuracy = 1),
Media       = comma(Media, accuracy = 0.01),
`Desv. Est.`= comma(`Desv. Est.`, accuracy = 0.01),
Min         = comma(Min, accuracy = 0.01),
Max         = comma(Max, accuracy = 0.01)
)
gt(tabla_1) |>
tab_header(title = md("**Tabla 1. Estadísticas descriptivas**")) |>
cols_label(
Variable = "Variable", N = "N",
Media = "Media", `Desv. Est.` = "Desv. Est.", Min = "Min", Max = "Max"
) |>
fmt_missing(everything(), missing_text = "NA")
db3 <- db%>% mutate(log_w = log(y_ing_lab_m_ha))
reg_p3 <- log_w ~ age + age^2
mod_p3 <- lm(reg_p3, data = db3)
stargazer(modelo_p3, type = "text", title = "Logaritmo del salario en funcion de la edad")
stargazer(mod_p3, type = "text", title = "Logaritmo del salario en funcion de la edad")
stargazer(mod_p3, type = "latex", title = "Logaritmo del salario en funcion de la edad")
reg_p3 <- log_w ~ age + I(age^2)
mod_p3 <- lm(reg_p3, data = db3)
stargazer(mod_p3, type = "text", title = "Logaritmo del salario en funcion de la edad")
stargazer(mod_p3, type = "latex", title = "Logaritmo del salario en funcion de la edad")
age_grid <- if ("age_seq" %in% names(db3)) db3$age_seq else if (exists("age_seq")) age_seq else db3$age
age_grid <- sort(unique(age_grid))
grid <- data.frame(age = age_grid)
# 2) Predicciones (log) + bandas 95%
pred <- predict(mod_p3, newdata = grid, se.fit = TRUE)
grid$logw_hat <- pred$fit
grid$logw_lo  <- pred$fit - 1.96 * pred$se.fit
grid$logw_hi  <- pred$fit + 1.96 * pred$se.fit
# 3) Volver a niveles (simple exp; si quieres, aplica Duan smearing)
grid$w_hat <- exp(grid$logw_hat)
grid$w_lo  <- exp(grid$logw_lo)
grid$w_hi  <- exp(grid$logw_hi)
# 4) Pico (edad de máximo)
b <- coef(mod_p3)
age_star <- -b["age"] / (2 * b["I(age^2)"])
w_at_peak <- exp(predict(mod_p3, newdata = data.frame(age = age_star)))
cat(sprintf("Pico (edad*): %.2f años\n", age_star))
# 5) (Opcional) mediana por edad para puntos más limpios
db_plot <- db3 %>%
filter(is.finite(log_w), is.finite(age)) %>%
mutate(w = exp(log_w)) %>%
group_by(age) %>%
summarise(w_med = median(w, na.rm = TRUE), .groups = "drop")
# 6) Gráfico en niveles (con tu secuencia)
p_niveles <- ggplot() +
geom_point(data = db_plot, aes(x = age, y = w_med), alpha = 0.4, size = 1) +
geom_ribbon(data = grid, aes(x = age, ymin = w_lo, ymax = w_hi), alpha = 0.2) +
geom_line(data = grid, aes(x = age, y = w_hat), size = 1) +
geom_vline(xintercept = age_star, linetype = 2) +
annotate("point", x = age_star, y = w_at_peak, size = 2) +
annotate("text", x = age_star, y = w_at_peak, label = sprintf("Pico ≈ %.1f", age_star),
vjust = -1, hjust = 0.5) +
labs(x = "Edad (años)", y = "Salario predicho (niveles)",
title = "Perfil edad–salario (modelo log con edad²)",
subtitle = "Curva y banda 95%; puntos = mediana del salario por edad") +
theme_bw()
# 7) Gráfico en log (coherente con la regresión)
p_log <- ggplot() +
geom_point(data = db3, aes(x = age, y = log_w), alpha = 0.15, size = 0.7) +
geom_ribbon(data = grid, aes(x = age, ymin = logw_lo, ymax = logw_hi), alpha = 0.2) +
geom_line(data = grid, aes(x = age, y = logw_hat), size = 1) +
geom_vline(xintercept = age_star, linetype = 2) +
labs(x = "Edad (años)", y = "log(Salario)",
title = "Perfil edad–salario (escala log)",
subtitle = "Curva ajustada y banda 95%") +
theme_bw()
p_niveles
p_log
rmse_mod3 <- sqrt(mean(residuals(mod_p3)^2))
rmse_mod3
set.seed(123)
B <- 1000
rmse_b <- replicate(B, {
idx <- sample.int(nrow(db3), replace = TRUE)
m_b <- lm(reg_p3, data = db3[idx, ])
sqrt(mean(residuals(m_b)^2))
})
quantile(rmse_b, c(.025, .975))  # IC 95% para el RMS
age_grid <- sort(unique(na.omit(as.numeric(db3$age))))
grid <- data.frame(age = age_grid)
pred_log_base <- predict(mod_p3, newdata = grid)
grid$w_hat_base <- exp(pred_log_base)
set.seed(123)
B <- 1000
n <- nrow(db3)
pred_boot <- matrix(NA_real_, nrow = nrow(grid), ncol = B)
age_star_boot <- numeric(B)
for (b in 1:B) {
idx <- sample.int(n, replace = TRUE)
mb  <- lm(formula(mod_p3), data = db3[idx, , drop = FALSE])
pred_b_log <- predict(mb, newdata = grid)
pred_boot[, b] <- exp(pred_b_log)
cb <- coef(mb)
age_star_boot[b] <- if (!is.na(cb["I(age^2)"]) && cb["I(age^2)"] != 0)
- cb["age"] / (2 * cb["I(age^2)"]) else NA_real_
}
# 4) Resúmenes (curva e IC del pico)
grid$w_med <- apply(pred_boot, 1, median, na.rm = TRUE)
grid$w_lo  <- apply(pred_boot, 1, quantile, 0.025, na.rm = TRUE)
grid$w_hi  <- apply(pred_boot, 1, quantile, 0.975, na.rm = TRUE)
age_hat <- - coef(mod_p3)["age"] / (2 * coef(mod_p3)["I(age^2)"])
age_ci  <- quantile(age_star_boot, c(.025, .975), na.rm = TRUE)
age_med <- median(age_star_boot, na.rm = TRUE)
cat(sprintf("Pico estimado: %.2f años\nIC95%% bootstrap: [%.2f, %.2f]\n",
age_hat, age_ci[1], age_ci[2]))
# 5) Gráfico
ggplot(grid, aes(age)) +
geom_ribbon(aes(ymin = w_lo, ymax = w_hi), alpha = 0.20) +
geom_line(aes(y = w_med), linewidth = 1) +
geom_line(aes(y = w_hat_base), linetype = 2) +
geom_vline(xintercept = age_med, linetype = 2) +
annotate("rect", xmin = age_ci[1], xmax = age_ci[2],
ymin = -Inf, ymax = Inf, alpha = 0.08) +
labs(x = "Edad (años)", y = "Ingreso predicho (niveles)",
title = "Perfil edad–ingresos con bandas bootstrap",
subtitle = "Línea continua: mediana bootstrap; banda: IC95%; punteada: ajuste base") +
theme_bw()
y_hat <- predict(mod_p3, newdata = edades)
edades_db <- data.frame(age = age_grid)
edades<- sort(unique(na.omit(as.numeric(db3$age))))
y_hat <- predict(mod_p3, newdata = edades)
log_w_hat <- predict(modelo_p3_mean, newdata = db3)
log_w_hat <- predict(mod_p3, newdata = db3)
ggplot(db2, aes(x = age, y = log_w_hat)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
geom_vline(xintercept = 45, color = "red", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(x = "Edad",
y = "Log(Salario)") +
theme_minimal()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
geom_vline(xintercept = 45, color = "red", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(x = "Edad",
y = "Log(Salario)") +
theme_minimal()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
geom_vline(xintercept = 33, color = "red", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(x = "Edad",
y = "Log(Salario)") +
theme_minimal()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
labs(x = "Edad",
y = "Log(Salario)") +
theme_minimal()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
geom_vline(xintercept = 33, color = "red", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(x = "Edad",
y = "Log(Salario)") +
theme_minimal()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
geom_vline(xintercept = 33, color = "red", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(x = "Edad",
y = "Log(Salario)")
summary(log_w_hat)
stat_fun <- function(d, index) {
m <- lm(log_w ~ age + I(age^2), data = d[index, , drop = FALSE])
# Curva en log sobre la malla
p <- predict(m, newdata = grid)
# Pico = -b_age / (2*b_age2)
b <- coef(m)
peak <- if (!is.na(b["I(age^2)"]) && b["I(age^2)"] != 0) -b["age"]/(2*b["I(age^2)"]) else NA_real_
c(p, peak)  # vector: (predicciones, pico)
}
set.seed(123)
B <- 1000
bt <- boot(data = db3_use, statistic = stat_fun, R = B)
pacman::p_load(
tidyverse,
rvest,
httr,
fs,
janitor,
readr,
haven,
readxl,
glue,
chromote,
xml2,
tibble,
purrr,
VIM,
gtsummary,
gt,
scales, boot
)
stat_fun <- function(d, index) {
m <- lm(log_w ~ age + I(age^2), data = d[index, , drop = FALSE])
# Curva en log sobre la malla
p <- predict(m, newdata = grid)
# Pico = -b_age / (2*b_age2)
b <- coef(m)
peak <- if (!is.na(b["I(age^2)"]) && b["I(age^2)"] != 0) -b["age"]/(2*b["I(age^2)"]) else NA_real_
c(p, peak)  # vector: (predicciones, pico)
}
set.seed(123)
B <- 1000
bt <- boot(data = db3_use, statistic = stat_fun, R = B)
db3_use <- subset(db3, is.finite(age) & is.finite(log_w))
age_grid <- sort(unique(db3_use$age))
grid <- data.frame(age = age_grid)
# 2) Predicción base (en log); la usaremos como trazo de referencia punteado
grid$log_hat_base <- predict(mod_p3, newdata = grid)
stat_fun <- function(d, index) {
m <- lm(log_w ~ age + I(age^2), data = d[index, , drop = FALSE])
# Curva en log sobre la malla
p <- predict(m, newdata = grid)
# Pico = -b_age / (2*b_age2)
b <- coef(m)
peak <- if (!is.na(b["I(age^2)"]) && b["I(age^2)"] != 0) -b["age"]/(2*b["I(age^2)"]) else NA_real_
c(p, peak)  # vector: (predicciones, pico)
}
set.seed(123)
B <- 1000
bt <- boot(data = db3_use, statistic = stat_fun, R = B)
# 4) Separar matriz de predicciones y vector de picos
G <- nrow(grid)
pred_mat <- bt$t[, 1:G, drop = FALSE]
peak_vec <- bt$t[, G + 1]
# 5) Resumir curva (mediana y percentiles 2.5% y 97.5%)
grid$log_med <- apply(pred_mat, 2, median,   na.rm = TRUE)
grid$log_lo  <- apply(pred_mat, 2, quantile, 0.025, na.rm = TRUE)
grid$log_hi  <- apply(pred_mat, 2, quantile, 0.975, na.rm = TRUE)
# 6) Pico y su IC 95% BCa
peak_med <- median(peak_vec, na.rm = TRUE)
ci_peak  <- boot.ci(bt, type = "bca", index = G + 1)  # IC del componente "pico"
ci_lower <- unname(ci_peak$bca[ , "lower"])
b3_hat <- coef(mod_p3)[3]
b3_hat
summary(mod_p3)
stargazer(mod_p3, type = "text", title = "Logaritmo del salario en funcion de la edad")
library(stargazer)
stargazer(mod_p3, type = "text", title = "Logaritmo del salario en funcion de la edad")
b2_hat <- coef(mod_p3)[2]
b3_hat <- coef(mod_p3)[3]
b3_hat
h2_hat
b2_hat
b3_hat
f_edad_pico <- function(db3, index){
mod_p3 <- lm(log_w ~ age + I(age^2), data = db3 , subset = index)
b2_hat <- coef(mod_p3)[2] # coefciente age
b3_hat <- coef(mod_p3)[3] # coeficiente age^2b3
edad_max <- -b2_hat/(2*b3_hat)
return(age_max_s)
}
f_edad_pico(db3, 1:nrow(db2))
f_edad_pico(db3, 1:nrow(db3))
f_edad_pico <- function(db3, index){
mod_p3 <- lm(log_w ~ age + I(age^2), data = db3 , subset = index)
b2_hat <- coef(mod_p3)[2] # coefciente age
b3_hat <- coef(mod_p3)[3] # coeficiente age^2b3
edad_max <- -b2_hat/(2*b3_hat)
return(edad_max)
}
f_edad_pico(db3, 1:nrow(db3))
boot_p3 <- boot(data = db3, f_edad_pico(), R = 1000)
boot_p3 <- boot(data = db3, f_edad_pico(), R = 1000)
set.seed(123)
boot_p3 <- boot(data = db3, f_edad_pico(), R = 1000)
set.seed(123)
boot_p3 <- boot(data = db3, f_edad_pico, R = 1000)
boot_p3
ic_p3 <- boot.ci(boot_p3, type = "perc") # (percentil 2.5 y 97.5 para un 95% de confianza).
ip_c3
ic_p3
ic_p3$percent[4:5]
ic_p3 <- boot.ci(boot_p3, type = "perc")$percent[4:5]
ic_p3
edad_max_boot <- boot_p3$t
ggplot(data.frame(edad_max_boot_p3), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "red", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = CF_S[1]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite inferior IC
geom_vline(aes(xintercept = CF_S[2]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_minimal()
ggplot(data.frame(edad_max_boot), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "red", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = CF_S[1]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite inferior IC
geom_vline(aes(xintercept = CF_S[2]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_minimal()
ggplot(data.frame(edad_max_boot), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "red", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = ic_p3[1]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite inferior IC
geom_vline(aes(xintercept = ic_p3[2]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_minimal()
ggplot(data.frame(edad_max_boot), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "red", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = ic_p3[1]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite inferior IC
geom_vline(aes(xintercept = ic_p3[2]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_bw()
plot(mod_p3)
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(x = "Edad",
y = "Log(Salario)") +
theme_bw()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "blue", alpha = 0.6) +  # Puntos en azul con transparencia
geom_vline(xintercept = 44.8, color = "red", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
# geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia opcional
labs(x = "Edad",
y = "Log(Salario)") +
theme_bw()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "darkblue", alpha = 0.5) +  # Puntos en azul con transparencia
geom_vline(xintercept = 44.8, color = "darkorchid", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
labs(x = "Edad",
y = "Log(Salario)") +
theme_bw()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "darkblue", alpha = 0.5) +  # Puntos en azul con transparencia
geom_vline(xintercept = 44.8, color = "darkorchid", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
labs(x = "Edad",
y = "Log(Salario)") +
scale_fill_hue(labels = c("Log_sal etimado", "Edad máxima"))+
theme_bw()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "darkblue", alpha = 0.5) +  # Puntos en azul con transparencia
geom_vline(xintercept = 44.8, color = "darkorchid", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
labs(x = "Edad",
y = "Log(Salario)") +
theme(legend.position = "bottom")
theme_bw()
ggplot(db3, aes(x = age, y = log_w_hat)) +
geom_point(color = "darkblue", alpha = 0.5) +  # Puntos en azul con transparencia
geom_vline(xintercept = 44.8, color = "darkorchid", linetype = "dashed", size = 1) +  # Línea vertical roja en x = 45
labs(x = "Edad",
y = "Log(Salario)") +
theme(legend.position = "bottom")
ggplot(db3, aes(age, log_w_hat)) +
geom_point(aes(color = "Salario estimado"), alpha = 0.5) +
geom_vline(aes(xintercept = 44.8, color = "Edad pico", linetype = "Edad pico"), linewidth = 1) +
scale_color_manual(name = NULL, values = c("Salario estimado" = "darkblue", "Edad pico" = "darkorchid")) +
scale_linetype_manual(name = NULL, values = c("Edad pico" = "dashed")) +
labs(x = "Edad", y = "log(Salario)") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(db3, aes(age, log_w_hat)) +
geom_point(aes(color = "Salario estimado"), alpha = 0.5) +
geom_vline(aes(xintercept = 44.8, color = "Edad pico", linetype = "Edad pico"), linewidth = 1) +
scale_color_manual(name = NULL, values = c("Salario estimado" = "darkblue", "Edad pico" = "darkorchid")) +
scale_linetype_manual(name = NULL, values = c("Edad pico" = "dashed")) +
labs(x = "Edad", y = "log(Salario)") +
theme_bw() +
theme(legend.position = "bottom")
ggplot(db3, aes(age, log_w_hat)) +
geom_point(aes(color = "Salario estimado"), alpha = 0.5) +
geom_vline(aes(xintercept = 44.8, color = "Edad pico", linetype = "Edad pico"), linewidth = 1) +
scale_color_manual(name = NULL, values = c("Salario estimado" = "darkblue", "Edad pico" = "darkorchid")) +
#  scale_linetype_manual(name = NULL, values = c("Edad pico" = "dashed")) +
labs(x = "Edad", y = "log(Salario)") +
theme_bw() +
theme(legend.position = "bottom")
ggplot(db3, aes(age, log_w_hat)) +
geom_point(aes(color = "Salario estimado"), alpha = 0.5) +
geom_vline(aes(xintercept = 44.8, color = "Edad pico", linetype = "Edad pico"), linewidth = 1) +
scale_color_manual(name = NULL, values = c("Salario estimado" = "darkblue", "Edad pico" = "darkorchid")) +
scale_linetype_manual(name = NULL, values = c("Edad pico" = "dashed")) +
labs(x = "Edad", y = "log(Salario)") +
theme_bw() +
theme(legend.position = "bottom")
ggplot(db3, aes(age, log_w_hat)) +
geom_point(aes(color = "Salario estimado"), alpha = 0.5) +
geom_vline(aes(xintercept = 44.8, color = "Edad pico", linetype = "Edad pico"),
linewidth = 1) +
scale_color_manual(name = NULL,
values = c("Salario estimado" = "darkblue", "Edad pico" = "darkorchid")) +
scale_linetype_manual(values = c("Edad pico" = "dashed"), guide = "none") +  # <- quita duplicado
labs(x = "Edad", y = "log(Salario)") +
theme_bw() +
theme(legend.position = "bottom")
pdf("views/edad pico1.pdf", width = 8, height = 6)
ggplot(db3, aes(age, log_w_hat)) +
geom_point(aes(color = "Salario estimado"), alpha = 0.5) +
geom_vline(aes(xintercept = 44.8, color = "Edad pico", linetype = "Edad pico"),
linewidth = 1) +
scale_color_manual(name = NULL,
values = c("Salario estimado" = "darkblue", "Edad pico" = "darkorchid")) +
scale_linetype_manual(values = c("Edad pico" = "dashed"), guide = "none") +  # <- quita duplicado
labs(x = "Edad", y = "log(Salario)") +
theme_bw() +
theme(legend.position = "bottom")
dev.off()
ggplot(data.frame(edad_max_boot), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "red", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = ic_p3[1]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite inferior IC
geom_vline(aes(xintercept = ic_p3[2]), color = "black", linetype = "dotted", linewidth = 1.2) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_bw()
ggplot(data.frame(edad_max_boot), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "darkblue", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "darkorchid", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = ic_p3[1]), color = "black", linetype = "longdash", linewidth = 1.2) +  # Límite inferior IC
geom_vline(aes(xintercept = ic_p3[2]), color = "black", linetype = "longdash", linewidth = 1.2) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_bw()
ggplot(data.frame(edad_max_boot), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "darkorchid", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = ic_p3[1]), color = "black", linetype = "longdash", linewidth = 0.5) +  # Límite inferior IC
geom_vline(aes(xintercept = ic_p3[2]), color = "black", linetype = "longdash", linewidth = 0.5) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_bw()
pdf("views/p3edad_max2.pdf", width = 8, height = 6)
ggplot(data.frame(edad_max_boot), aes(x = edad_max_boot)) +
geom_histogram(aes(y =after_stat(density)), bins = 30, fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_density(color = "blue", linewidth = 1) +  # Agregar densidad
geom_vline(aes(xintercept = mean(edad_max_boot)), color = "darkorchid", linetype = "dashed", linewidth = 1) +  # Media
geom_vline(aes(xintercept = ic_p3[1]), color = "black", linetype = "longdash", linewidth = 0.5) +  # Límite inferior IC
geom_vline(aes(xintercept = ic_p3[2]), color = "black", linetype = "longdash", linewidth = 0.5) +  # Límite superior IC
labs(
x = "Edad máxima estimada",
y = "Densidad") +
theme_bw()
dev.off()
